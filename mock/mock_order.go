// Code generated by MockGen. DO NOT EDIT.
// Source: acl/ports/repositories/order.go

// Package mock is a generated GoMock package.
package mock

import (
	pl "order-context/acl/adapters/pl"
	common "order-context/common"
	aggregate "order-context/domain/aggregate"
	pl0 "order-context/ohs/local/pl"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CheckOrderExists mocks base method.
func (m *MockOrderRepository) CheckOrderExists(orderID, siteCode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOrderExists", orderID, siteCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOrderExists indicates an expected call of CheckOrderExists.
func (mr *MockOrderRepositoryMockRecorder) CheckOrderExists(orderID, siteCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOrderExists", reflect.TypeOf((*MockOrderRepository)(nil).CheckOrderExists), orderID, siteCode)
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(arg0 *aggregate.AggregateRoot, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), arg0, arg1)
}

// GetOrderDetail mocks base method.
func (m *MockOrderRepository) GetOrderDetail(orderID, siteCode string) (pl.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderDetail", orderID, siteCode)
	ret0, _ := ret[0].(pl.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderDetail indicates an expected call of GetOrderDetail.
func (mr *MockOrderRepositoryMockRecorder) GetOrderDetail(orderID, siteCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderDetail", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderDetail), orderID, siteCode)
}

// GetOrderList mocks base method.
func (m *MockOrderRepository) GetOrderList(arg0 pl0.ListOrderParams) ([]pl.Order, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderList", arg0)
	ret0, _ := ret[0].([]pl.Order)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrderList indicates an expected call of GetOrderList.
func (mr *MockOrderRepositoryMockRecorder) GetOrderList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderList", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderList), arg0)
}

// UpdateOrderStatus mocks base method.
func (m *MockOrderRepository) UpdateOrderStatus(orderID, siteCode string, status common.StatusType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", orderID, siteCode, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockOrderRepositoryMockRecorder) UpdateOrderStatus(orderID, siteCode, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockOrderRepository)(nil).UpdateOrderStatus), orderID, siteCode, status)
}
